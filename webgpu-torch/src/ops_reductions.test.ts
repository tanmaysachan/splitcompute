import { tensor } from "./ops_artisanal";

test("sum dim=0/1", async () => {
    const x = tensor([-50.0, 18.0]);
    expect(x.shape).toEqual([2]);
    const y = x.sum(0);
    expect(y.shape).toEqual([]);
    expect(await y.toArrayAsync()).toEqual(-32.0);
});
test("sum dim=0/2", async () => {
    const x = tensor([[70.0, 40.0, 49.0], [80.0, -59.0, 27.0]]);
    expect(x.shape).toEqual([2, 3]);
    const y = x.sum(0);
    expect(y.shape).toEqual([3]);
    expect(await y.toArrayAsync()).toEqual([150.0, -19.0, 76.0]);
});
test("sum dim=1/2", async () => {
    const x = tensor([[38.0, 70.0, -24.0], [-46.0, -49.0, -35.0]]);
    expect(x.shape).toEqual([2, 3]);
    const y = x.sum(1);
    expect(y.shape).toEqual([2]);
    expect(await y.toArrayAsync()).toEqual([84.0, -130.0]);
});
test("sum dim=0/3", async () => {
    const x = tensor([[[-42.0, 73.0, -70.0, 61.0, 40.0], [-80.0, 63.0, 30.0, -27.0, -49.0], [-8.0, -11.0, 60.0, -27.0, -93.0]], [[46.0, 91.0, -61.0, 40.0, -94.0], [52.0, 9.0, 76.0, 84.0, -18.0], [-59.0, -64.0, -83.0, -75.0, -81.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.sum(0);
    expect(y.shape).toEqual([3, 5]);
    expect(await y.toArrayAsync()).toEqual([[4.0, 164.0, -131.0, 101.0, -54.0], [-28.0, 72.0, 106.0, 57.0, -67.0], [-67.0, -75.0, -23.0, -102.0, -174.0]]);
});
test("sum dim=1/3", async () => {
    const x = tensor([[[-38.0, 79.0, 30.0, -76.0, -95.0], [98.0, 86.0, 21.0, -69.0, 8.0], [-70.0, -14.0, -62.0, -57.0, -83.0]], [[75.0, 24.0, 17.0, 11.0, -64.0], [43.0, 64.0, -24.0, 40.0, 93.0], [-21.0, 62.0, 34.0, 36.0, 61.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.sum(1);
    expect(y.shape).toEqual([2, 5]);
    expect(await y.toArrayAsync()).toEqual([[-10.0, 151.0, -11.0, -202.0, -170.0], [97.0, 150.0, 27.0, 87.0, 90.0]]);
});
test("sum dim=2/3", async () => {
    const x = tensor([[[-64.0, -76.0, 46.0, 77.0, 82.0], [-83.0, -6.0, 38.0, -76.0, 21.0], [51.0, 65.0, -74.0, 73.0, -92.0]], [[-7.0, 5.0, -43.0, 69.0, -36.0], [-84.0, 59.0, -15.0, 27.0, 50.0], [-27.0, 99.0, -16.0, -19.0, -11.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.sum(2);
    expect(y.shape).toEqual([2, 3]);
    expect(await y.toArrayAsync()).toEqual([[65.0, -106.0, 23.0], [-12.0, 37.0, 26.0]]);
});
test("sum dim=0/4", async () => {
    const x = tensor([[[[-68.0, 25.0, -29.0, 36.0, 4.0, 76.0, 91.0], [-45.0, -89.0, -40.0, -34.0, 45.0, 7.0, 51.0], [-64.0, -53.0, -42.0, -96.0, 24.0, -69.0, -26.0], [64.0, 34.0, 80.0, -25.0, 49.0, -25.0, 56.0], [-51.0, -94.0, 56.0, 88.0, -97.0, -62.0, 83.0]], [[-38.0, 22.0, 72.0, -13.0, 44.0, 58.0, -61.0], [-17.0, 89.0, -73.0, -1.0, 65.0, -28.0, -98.0], [-93.0, -61.0, -66.0, -78.0, -38.0, 58.0, 45.0], [7.0, 63.0, 94.0, -77.0, 55.0, 68.0, -68.0], [100.0, 83.0, 91.0, -49.0, 50.0, -10.0, -93.0]], [[49.0, -91.0, -38.0, 42.0, 4.0, -20.0, -55.0], [-99.0, -77.0, 35.0, 49.0, 47.0, 42.0, -65.0], [-45.0, 42.0, 86.0, -55.0, -28.0, 2.0, 46.0], [33.0, -46.0, 86.0, 67.0, -9.0, -82.0, -10.0], [15.0, -44.0, 16.0, -51.0, -35.0, -34.0, -3.0]]], [[[33.0, -13.0, -64.0, -55.0, -58.0, -37.0, -31.0], [97.0, -89.0, 47.0, -56.0, 44.0, 72.0, -91.0], [-50.0, -47.0, 60.0, 75.0, -14.0, 39.0, 88.0], [69.0, -40.0, 58.0, -55.0, -62.0, 42.0, -26.0], [76.0, 28.0, 17.0, 38.0, 52.0, 9.0, -74.0]], [[38.0, -82.0, 59.0, 16.0, -59.0, 82.0, 29.0], [-51.0, -34.0, 30.0, 69.0, -33.0, -73.0, -48.0], [63.0, -35.0, -72.0, -27.0, 20.0, 10.0, -42.0], [48.0, -70.0, 86.0, 58.0, 22.0, 77.0, 74.0], [96.0, -36.0, 85.0, -68.0, -0.0, 7.0, -31.0]], [[43.0, 76.0, -66.0, -52.0, 19.0, 43.0, 37.0], [99.0, 22.0, 23.0, -9.0, 76.0, -46.0, 39.0], [-62.0, -57.0, 83.0, 40.0, -20.0, 61.0, 83.0], [94.0, -46.0, -98.0, 13.0, 86.0, 49.0, -9.0], [6.0, 12.0, 63.0, -52.0, 26.0, 68.0, -23.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.sum(0);
    expect(y.shape).toEqual([3, 5, 7]);
    expect(await y.toArrayAsync()).toEqual([[[-35.0, 12.0, -93.0, -19.0, -54.0, 39.0, 60.0], [52.0, -178.0, 7.0, -90.0, 89.0, 79.0, -40.0], [-114.0, -100.0, 18.0, -21.0, 10.0, -30.0, 62.0], [133.0, -6.0, 138.0, -80.0, -13.0, 17.0, 30.0], [25.0, -66.0, 73.0, 126.0, -45.0, -53.0, 9.0]], [[0.0, -60.0, 131.0, 3.0, -15.0, 140.0, -32.0], [-68.0, 55.0, -43.0, 68.0, 32.0, -101.0, -146.0], [-30.0, -96.0, -138.0, -105.0, -18.0, 68.0, 3.0], [55.0, -7.0, 180.0, -19.0, 77.0, 145.0, 6.0], [196.0, 47.0, 176.0, -117.0, 50.0, -3.0, -124.0]], [[92.0, -15.0, -104.0, -10.0, 23.0, 23.0, -18.0], [0.0, -55.0, 58.0, 40.0, 123.0, -4.0, -26.0], [-107.0, -15.0, 169.0, -15.0, -48.0, 63.0, 129.0], [127.0, -92.0, -12.0, 80.0, 77.0, -33.0, -19.0], [21.0, -32.0, 79.0, -103.0, -9.0, 34.0, -26.0]]]);
});
test("sum dim=1/4", async () => {
    const x = tensor([[[[-22.0, 21.0, -5.0, -10.0, 26.0, -43.0, -6.0], [53.0, -79.0, 72.0, -38.0, 69.0, 37.0, 45.0], [0.0, -22.0, -60.0, -47.0, 6.0, -69.0, 92.0], [42.0, -91.0, 39.0, 2.0, 55.0, -61.0, 74.0], [54.0, 24.0, 81.0, 78.0, -63.0, 95.0, 48.0]], [[-11.0, 3.0, 86.0, -75.0, -83.0, 71.0, 42.0], [8.0, -35.0, 65.0, -19.0, 16.0, -18.0, 66.0], [-37.0, 28.0, -4.0, 25.0, 21.0, -26.0, 2.0], [25.0, 43.0, 82.0, -47.0, -16.0, -36.0, 71.0], [21.0, 61.0, 70.0, -97.0, 26.0, -3.0, 100.0]], [[44.0, 52.0, 34.0, 81.0, -52.0, 23.0, -60.0], [86.0, 24.0, 55.0, -75.0, 44.0, 58.0, 72.0], [94.0, 38.0, -64.0, 30.0, 95.0, -87.0, -13.0], [-86.0, 29.0, 97.0, 5.0, -66.0, -75.0, 3.0], [-52.0, -41.0, -37.0, -75.0, 53.0, 23.0, 44.0]]], [[[-93.0, -16.0, -72.0, 62.0, -11.0, 11.0, -6.0], [91.0, -45.0, -87.0, -89.0, -67.0, 95.0, -97.0], [-45.0, 57.0, 76.0, -47.0, -18.0, 93.0, -87.0], [-38.0, 28.0, -63.0, -8.0, 2.0, 7.0, 12.0], [63.0, 12.0, -42.0, -76.0, -20.0, 0.0, -58.0]], [[-5.0, -81.0, -9.0, -97.0, -91.0, 96.0, -85.0], [54.0, -88.0, -97.0, -32.0, -68.0, -59.0, 40.0], [94.0, 67.0, 46.0, 45.0, 54.0, -17.0, 23.0], [98.0, -46.0, 54.0, -34.0, -94.0, 20.0, 35.0], [88.0, 35.0, -88.0, 65.0, 57.0, 73.0, -57.0]], [[13.0, -99.0, -9.0, -85.0, 87.0, 78.0, -45.0], [-82.0, -91.0, -25.0, 23.0, -86.0, 35.0, 45.0], [64.0, 47.0, -66.0, 35.0, 36.0, 76.0, -54.0], [-17.0, 95.0, -50.0, 97.0, -77.0, 98.0, -70.0], [-51.0, -51.0, 87.0, -78.0, -71.0, 52.0, 22.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.sum(1);
    expect(y.shape).toEqual([2, 5, 7]);
    expect(await y.toArrayAsync()).toEqual([[[11.0, 76.0, 115.0, -4.0, -109.0, 51.0, -24.0], [147.0, -90.0, 192.0, -132.0, 129.0, 77.0, 183.0], [57.0, 44.0, -128.0, 8.0, 122.0, -182.0, 81.0], [-19.0, -19.0, 218.0, -40.0, -27.0, -172.0, 148.0], [23.0, 44.0, 114.0, -94.0, 16.0, 115.0, 192.0]], [[-85.0, -196.0, -90.0, -120.0, -15.0, 185.0, -136.0], [63.0, -224.0, -209.0, -98.0, -221.0, 71.0, -12.0], [113.0, 171.0, 56.0, 33.0, 72.0, 152.0, -118.0], [43.0, 77.0, -59.0, 55.0, -169.0, 125.0, -23.0], [100.0, -4.0, -43.0, -89.0, -34.0, 125.0, -93.0]]]);
});
test("sum dim=2/4", async () => {
    const x = tensor([[[[16.0, 9.0, 47.0, 66.0, 93.0, 24.0, 60.0], [-8.0, -11.0, 14.0, 3.0, 34.0, -83.0, -84.0], [98.0, -73.0, -3.0, -4.0, 49.0, -96.0, 84.0], [-74.0, -88.0, -42.0, -35.0, -25.0, 32.0, -35.0], [-0.0, -24.0, 60.0, 73.0, -66.0, 51.0, 76.0]], [[-79.0, 51.0, -38.0, 39.0, 51.0, -72.0, 35.0], [-26.0, -60.0, -22.0, -15.0, -36.0, 32.0, 8.0], [-88.0, -2.0, -48.0, -91.0, -23.0, 85.0, -71.0], [18.0, 17.0, 47.0, 7.0, 23.0, -49.0, -35.0], [18.0, -38.0, 3.0, 1.0, -50.0, 33.0, 96.0]], [[-44.0, -2.0, -12.0, -19.0, -32.0, -28.0, -79.0], [-38.0, 10.0, -44.0, -76.0, -12.0, 84.0, 27.0], [68.0, -82.0, -4.0, 61.0, 27.0, -78.0, -97.0], [50.0, -83.0, 39.0, 18.0, -56.0, -81.0, -28.0], [-96.0, 33.0, 94.0, 39.0, 84.0, -0.0, -0.0]]], [[[-26.0, 67.0, -37.0, -92.0, 71.0, -96.0, 73.0], [-42.0, 28.0, 89.0, 26.0, -92.0, 3.0, 20.0], [-58.0, -85.0, -42.0, 78.0, -54.0, 50.0, 59.0], [-87.0, -12.0, -21.0, -77.0, 93.0, -22.0, 25.0], [64.0, -68.0, -17.0, -25.0, -97.0, -30.0, 7.0]], [[-50.0, -22.0, -86.0, 21.0, -92.0, 76.0, 71.0], [43.0, 71.0, 24.0, -66.0, -71.0, -64.0, 61.0], [-48.0, -5.0, -8.0, 9.0, -84.0, -2.0, -10.0], [26.0, 76.0, -64.0, 89.0, -28.0, 78.0, 45.0], [-33.0, 33.0, -97.0, 64.0, 51.0, -65.0, -44.0]], [[73.0, -84.0, -8.0, 40.0, 33.0, -6.0, -83.0], [4.0, 96.0, 50.0, 23.0, -31.0, 46.0, -48.0], [-71.0, 39.0, -30.0, 52.0, 50.0, -25.0, 87.0], [96.0, -77.0, -69.0, -47.0, 6.0, 26.0, 58.0], [-10.0, -29.0, -52.0, -75.0, 54.0, 50.0, -52.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.sum(2);
    expect(y.shape).toEqual([2, 3, 7]);
    expect(await y.toArrayAsync()).toEqual([[[32.0, -187.0, 76.0, 103.0, 85.0, -72.0, 101.0], [-157.0, -32.0, -58.0, -59.0, -35.0, 29.0, 33.0], [-60.0, -124.0, 73.0, 23.0, 11.0, -103.0, -177.0]], [[-149.0, -70.0, -28.0, -90.0, -79.0, -95.0, 184.0], [-62.0, 153.0, -231.0, 117.0, -224.0, 23.0, 123.0], [92.0, -55.0, -109.0, -7.0, 112.0, 91.0, -38.0]]]);
});
test("sum dim=3/4", async () => {
    const x = tensor([[[[89.0, -23.0, -9.0, 97.0, -92.0, -24.0, -19.0], [-70.0, 68.0, -12.0, -61.0, -31.0, 94.0, 22.0], [38.0, 41.0, -73.0, -40.0, -60.0, -90.0, -74.0], [77.0, -8.0, 54.0, 34.0, 12.0, 99.0, -44.0], [-47.0, -90.0, 10.0, -16.0, 13.0, -96.0, 51.0]], [[40.0, -71.0, -84.0, 7.0, -80.0, -56.0, -71.0], [-32.0, -43.0, 45.0, 89.0, 79.0, 58.0, -83.0], [-1.0, -85.0, 39.0, 88.0, 75.0, 41.0, -41.0], [54.0, -86.0, -40.0, -96.0, 70.0, -55.0, -28.0], [29.0, -7.0, 45.0, 66.0, -6.0, -53.0, 15.0]], [[-59.0, 75.0, -74.0, -36.0, -52.0, -91.0, -40.0], [43.0, -46.0, 73.0, 18.0, -98.0, -29.0, -37.0], [35.0, -89.0, 22.0, -50.0, 80.0, 58.0, 48.0], [-60.0, -41.0, -19.0, 64.0, 71.0, -77.0, -80.0], [85.0, 82.0, -74.0, -87.0, 40.0, -95.0, -26.0]]], [[[25.0, 17.0, 85.0, -54.0, 68.0, 15.0, -25.0], [-12.0, -69.0, -8.0, 16.0, -50.0, -33.0, -93.0], [75.0, 14.0, -86.0, 12.0, -72.0, -81.0, -89.0], [-2.0, -50.0, 75.0, 1.0, 53.0, 76.0, -63.0], [73.0, -70.0, 4.0, 13.0, -94.0, -84.0, -7.0]], [[63.0, -2.0, -30.0, 52.0, -17.0, -45.0, 74.0], [-81.0, -68.0, -90.0, 44.0, -52.0, -83.0, 86.0], [31.0, 34.0, 60.0, -78.0, -23.0, -95.0, -59.0], [-48.0, -10.0, -25.0, 98.0, -57.0, -0.0, 46.0], [-23.0, -56.0, -9.0, 61.0, 76.0, -95.0, -7.0]], [[91.0, 72.0, -94.0, -14.0, 44.0, -21.0, -94.0], [-14.0, -80.0, 39.0, -15.0, 83.0, 36.0, -51.0], [-53.0, 51.0, -3.0, -88.0, -8.0, 49.0, 2.0], [6.0, 49.0, 29.0, 61.0, 59.0, -71.0, 23.0], [-59.0, 75.0, -35.0, -64.0, -49.0, -67.0, 19.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.sum(3);
    expect(y.shape).toEqual([2, 3, 5]);
    expect(await y.toArrayAsync()).toEqual([[[19.0, 10.0, -258.0, 224.0, -175.0], [-315.0, 113.0, 116.0, -181.0, 89.0], [-277.0, -76.0, 104.0, -142.0, -75.0]], [[131.0, -249.0, -227.0, 90.0, -165.0], [95.0, -244.0, -130.0, 4.0, -53.0], [-16.0, -2.0, -50.0, 156.0, -180.0]]]);
});
test("prod dim=0/1", async () => {
    const x = tensor([-19.0, -70.0]);
    expect(x.shape).toEqual([2]);
    const y = x.prod(0);
    expect(y.shape).toEqual([]);
    expect(await y.toArrayAsync()).toEqual(1330.0);
});
test("prod dim=0/2", async () => {
    const x = tensor([[20.0, -6.0, 34.0], [52.0, -16.0, 31.0]]);
    expect(x.shape).toEqual([2, 3]);
    const y = x.prod(0);
    expect(y.shape).toEqual([3]);
    expect(await y.toArrayAsync()).toEqual([1040.0, 96.0, 1054.0]);
});
test("prod dim=1/2", async () => {
    const x = tensor([[-79.0, 91.0, -77.0], [71.0, 2.0, -55.0]]);
    expect(x.shape).toEqual([2, 3]);
    const y = x.prod(1);
    expect(y.shape).toEqual([2]);
    expect(await y.toArrayAsync()).toEqual([553553.0, -7810.0]);
});
test("prod dim=0/3", async () => {
    const x = tensor([[[-92.0, 87.0, 98.0, 75.0, -3.0], [57.0, -45.0, -59.0, 15.0, 39.0], [79.0, -4.0, -48.0, 96.0, -38.0]], [[98.0, -39.0, 35.0, -5.0, -76.0], [-41.0, -38.0, 31.0, 77.0, 59.0], [-31.0, 20.0, 78.0, -97.0, 18.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.prod(0);
    expect(y.shape).toEqual([3, 5]);
    expect(await y.toArrayAsync()).toEqual([[-9016.0, -3393.0, 3430.0, -375.0, 228.0], [-2337.0, 1710.0, -1829.0, 1155.0, 2301.0], [-2449.0, -80.0, -3744.0, -9312.0, -684.0]]);
});
test("prod dim=1/3", async () => {
    const x = tensor([[[-0.0, 30.0, -52.0, -86.0, 40.0], [92.0, -12.0, 16.0, 21.0, 69.0], [16.0, -31.0, 62.0, 44.0, 55.0]], [[35.0, -77.0, 62.0, 61.0, 61.0], [-91.0, 6.0, 35.0, -97.0, -75.0], [-51.0, -36.0, -69.0, 57.0, 5.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.prod(1);
    expect(y.shape).toEqual([2, 5]);
    expect(await y.toArrayAsync()).toEqual([[-0.0, 11160.0, -51584.0, -79464.0, 151800.0], [162435.0, 16632.0, -149730.0, -337269.0, -22875.0]]);
});
test("prod dim=2/3", async () => {
    const x = tensor([[[37.0, 16.0, 89.0, 7.0, 99.0], [73.0, 65.0, -24.0, -14.0, 40.0], [76.0, 16.0, 9.0, 38.0, -96.0]], [[-78.0, -35.0, 91.0, -59.0, -36.0], [59.0, 94.0, 36.0, -5.0, 89.0], [39.0, -30.0, 66.0, 13.0, -67.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.prod(2);
    expect(y.shape).toEqual([2, 3]);
    expect(await y.toArrayAsync()).toEqual([[36512784.0, 63772800.0, -39923712.0], [527665312.0, -88846920.0, 67258624.0]]);
});
test("prod dim=0/4", async () => {
    const x = tensor([[[[-15.0, -30.0, -73.0, -36.0, 60.0, 52.0, 17.0], [-10.0, -58.0, 38.0, 40.0, -93.0, -64.0, -95.0], [-60.0, 61.0, -75.0, -62.0, -83.0, 63.0, -91.0], [-99.0, -56.0, -43.0, -2.0, 95.0, -54.0, -91.0], [-71.0, 49.0, -20.0, 52.0, 61.0, 74.0, -75.0]], [[-19.0, 5.0, 90.0, 62.0, 72.0, 50.0, -78.0], [-12.0, 88.0, -44.0, 1.0, 56.0, 36.0, -13.0], [76.0, 79.0, 79.0, -29.0, -99.0, -0.0, -29.0], [-75.0, -68.0, 63.0, -17.0, -54.0, 34.0, -88.0], [97.0, 27.0, 59.0, -33.0, 55.0, -91.0, -34.0]], [[-88.0, 88.0, 43.0, 39.0, 9.0, -18.0, -32.0], [-27.0, 57.0, -15.0, 35.0, 4.0, -97.0, -21.0], [79.0, 68.0, -95.0, -45.0, 81.0, -95.0, 55.0], [-48.0, -9.0, -19.0, -13.0, 30.0, -64.0, -36.0], [9.0, -30.0, -93.0, 73.0, -1.0, 35.0, 83.0]]], [[[-87.0, 83.0, -3.0, -89.0, -76.0, -71.0, -92.0], [-44.0, 100.0, 9.0, -4.0, 86.0, 4.0, 88.0], [-33.0, -37.0, -63.0, 19.0, 82.0, -68.0, 19.0], [-22.0, -20.0, 58.0, 8.0, 90.0, 43.0, 26.0], [41.0, -79.0, 56.0, 4.0, -46.0, -61.0, -76.0]], [[26.0, 65.0, -11.0, 2.0, 66.0, -79.0, -10.0], [-18.0, 79.0, -24.0, -23.0, -2.0, -15.0, -47.0], [81.0, 38.0, -2.0, 51.0, -83.0, -47.0, -31.0], [26.0, 47.0, 91.0, 55.0, 54.0, -65.0, -72.0], [-53.0, 25.0, 50.0, -88.0, -77.0, -31.0, -81.0]], [[37.0, 37.0, 67.0, -3.0, -85.0, -35.0, 29.0], [3.0, 8.0, 4.0, -82.0, -45.0, 71.0, 34.0], [15.0, -71.0, -54.0, 26.0, 77.0, -48.0, 64.0], [-94.0, -29.0, -42.0, 27.0, 1.0, -53.0, -80.0], [-10.0, 65.0, 71.0, 48.0, 6.0, 20.0, -34.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.prod(0);
    expect(y.shape).toEqual([3, 5, 7]);
    expect(await y.toArrayAsync()).toEqual([[[1305.0, -2490.0, 219.0, 3204.0, -4560.0, -3692.0, -1564.0], [440.0, -5800.0, 342.0, -160.0, -7998.0, -256.0, -8360.0], [1980.0, -2257.0, 4725.0, -1178.0, -6806.0, -4284.0, -1729.0], [2178.0, 1120.0, -2494.0, -16.0, 8550.0, -2322.0, -2366.0], [-2911.0, -3871.0, -1120.0, 208.0, -2806.0, -4514.0, 5700.0]], [[-494.0, 325.0, -990.0, 124.0, 4752.0, -3950.0, 780.0], [216.0, 6952.0, 1056.0, -23.0, -112.0, -540.0, 611.0], [6156.0, 3002.0, -158.0, -1479.0, 8217.0, 0.0, 899.0], [-1950.0, -3196.0, 5733.0, -935.0, -2916.0, -2210.0, 6336.0], [-5141.0, 675.0, 2950.0, 2904.0, -4235.0, 2821.0, 2754.0]], [[-3256.0, 3256.0, 2881.0, -117.0, -765.0, 630.0, -928.0], [-81.0, 456.0, -60.0, -2870.0, -180.0, -6887.0, -714.0], [1185.0, -4828.0, 5130.0, -1170.0, 6237.0, 4560.0, 3520.0], [4512.0, 261.0, 798.0, -351.0, 30.0, 3392.0, 2880.0], [-90.0, -1950.0, -6603.0, 3504.0, -6.0, 700.0, -2822.0]]]);
});
test("prod dim=1/4", async () => {
    const x = tensor([[[[38.0, -4.0, 55.0, -98.0, -5.0, -59.0, -36.0], [-37.0, -7.0, 97.0, -83.0, -60.0, -58.0, 98.0], [-71.0, 75.0, -32.0, -58.0, 16.0, 6.0, 5.0], [62.0, -33.0, -99.0, 59.0, -34.0, -90.0, 18.0], [-31.0, 76.0, -63.0, -34.0, 15.0, 47.0, 4.0]], [[-43.0, 80.0, 87.0, -39.0, 5.0, 87.0, 34.0], [-61.0, -6.0, 83.0, -29.0, 44.0, 89.0, -45.0], [17.0, -39.0, -96.0, 24.0, 49.0, 67.0, 18.0], [-75.0, 13.0, -28.0, 64.0, 34.0, -76.0, -22.0], [-97.0, -16.0, 75.0, -17.0, -25.0, -79.0, -87.0]], [[-39.0, -80.0, -13.0, 29.0, 36.0, 75.0, -49.0], [-46.0, 90.0, -18.0, -90.0, -89.0, -99.0, -23.0], [85.0, -93.0, -21.0, -87.0, -83.0, -47.0, 62.0], [24.0, 93.0, -53.0, 67.0, 10.0, -34.0, 8.0], [-31.0, -63.0, 72.0, -3.0, -41.0, -61.0, 30.0]]], [[[-11.0, 94.0, 2.0, -38.0, -6.0, 6.0, -74.0], [-63.0, -46.0, 8.0, -74.0, -5.0, -12.0, -44.0], [-90.0, -29.0, 24.0, 47.0, -83.0, 16.0, -5.0], [-59.0, 92.0, -67.0, 13.0, -86.0, -61.0, 48.0], [25.0, 2.0, -53.0, 40.0, 4.0, -64.0, 2.0]], [[31.0, -70.0, 66.0, 82.0, 52.0, 6.0, -10.0], [39.0, 44.0, -19.0, 56.0, 99.0, -3.0, 63.0], [43.0, 95.0, 30.0, -20.0, 67.0, 83.0, -16.0], [-24.0, 5.0, 69.0, -4.0, 45.0, 70.0, -54.0], [19.0, 28.0, 61.0, -56.0, -92.0, 64.0, 97.0]], [[27.0, -55.0, 77.0, -5.0, -39.0, 57.0, -96.0], [-68.0, -39.0, 93.0, -24.0, -40.0, 78.0, -75.0], [73.0, 64.0, -46.0, 91.0, -16.0, 16.0, 63.0], [-93.0, -14.0, -41.0, 41.0, -92.0, -89.0, -74.0], [-91.0, -80.0, -63.0, 47.0, -8.0, 45.0, -14.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.prod(1);
    expect(y.shape).toEqual([2, 5, 7]);
    expect(await y.toArrayAsync()).toEqual([[[63726.0, 25600.0, -62205.0, 110838.0, -900.0, -384975.0, 59976.0], [-103822.0, 3780.0, -144918.0, -216630.0, 234960.0, 511038.0, 101430.0], [-102595.0, 272025.0, -64512.0, 121104.0, -65072.0, -18894.0, 5580.0], [-111600.0, -39897.0, -146916.0, 252992.0, -11560.0, -232560.0, -3168.0], [-93217.0, 76608.0, -340200.0, -1734.0, 15375.0, 226493.0, -10440.0]], [[-9207.0, 361900.0, 10164.0, 15580.0, 12168.0, 2052.0, -71040.0], [167076.0, 78936.0, -14136.0, 99456.0, 19800.0, 2808.0, 207900.0], [-282510.0, -176320.0, -33120.0, -85540.0, 88976.0, 21248.0, 5040.0], [-131688.0, -6440.0, 189543.0, -2132.0, 356040.0, 380030.0, 191808.0], [-43225.0, -4480.0, 203679.0, -105280.0, 2944.0, -184320.0, -2716.0]]]);
});
test("mean dim=0/1", async () => {
    const x = tensor([-82.0, 67.0]);
    expect(x.shape).toEqual([2]);
    const y = x.mean(0);
    expect(y.shape).toEqual([]);
    expect(await y.toArrayAsync()).toEqual(-7.5);
});
test("mean dim=0/2", async () => {
    const x = tensor([[23.0, 38.0, -34.0], [76.0, -89.0, 67.0]]);
    expect(x.shape).toEqual([2, 3]);
    const y = x.mean(0);
    expect(y.shape).toEqual([3]);
    expect(await y.toArrayAsync()).toEqual([49.5, -25.5, 16.5]);
});
test("mean dim=1/2", async () => {
    const x = tensor([[-66.0, -11.0, -61.0], [-8.0, -37.0, 80.0]]);
    expect(x.shape).toEqual([2, 3]);
    const y = x.mean(1);
    expect(y.shape).toEqual([2]);
    expect(await y.toArrayAsync()).toEqual([-46.0, 11.666666984558105]);
});
test("mean dim=0/3", async () => {
    const x = tensor([[[32.0, -23.0, -1.0, 18.0, -94.0], [-65.0, -81.0, 54.0, 44.0, 55.0], [64.0, 58.0, 13.0, 90.0, 59.0]], [[-91.0, 65.0, 38.0, -88.0, -92.0], [-0.0, -91.0, -88.0, -58.0, 22.0], [-78.0, -33.0, -32.0, -52.0, -11.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.mean(0);
    expect(y.shape).toEqual([3, 5]);
    expect(await y.toArrayAsync()).toEqual([[-29.5, 21.0, 18.5, -35.0, -93.0], [-32.5, -86.0, -17.0, -7.0, 38.5], [-7.0, 12.5, -9.5, 19.0, 24.0]]);
});
test("mean dim=1/3", async () => {
    const x = tensor([[[-12.0, -47.0, -36.0, -40.0, 69.0], [58.0, 37.0, -29.0, -78.0, 84.0], [22.0, 7.0, -43.0, 75.0, 43.0]], [[-89.0, -12.0, 95.0, -29.0, -73.0], [-72.0, -8.0, -23.0, 85.0, -98.0], [64.0, -67.0, -30.0, -51.0, -90.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.mean(1);
    expect(y.shape).toEqual([2, 5]);
    expect(await y.toArrayAsync()).toEqual([[22.66666603088379, -1.0, -36.0, -14.333333015441895, 65.33333587646484], [-32.33333206176758, -29.0, 14.0, 1.6666666269302368, -87.0]]);
});
test("mean dim=2/3", async () => {
    const x = tensor([[[71.0, 93.0, -56.0, 93.0, 94.0], [16.0, -6.0, 95.0, -76.0, 69.0], [-39.0, 63.0, 26.0, -48.0, -71.0]], [[96.0, -53.0, -43.0, 61.0, 84.0], [-11.0, -9.0, -67.0, 17.0, 54.0], [-95.0, -55.0, -75.0, -5.0, -12.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.mean(2);
    expect(y.shape).toEqual([2, 3]);
    expect(await y.toArrayAsync()).toEqual([[59.0, 19.600000381469727, -13.800000190734863], [29.0, -3.200000047683716, -48.400001525878906]]);
});
test("mean dim=0/4", async () => {
    const x = tensor([[[[-51.0, -17.0, 96.0, 0.0, 67.0, -100.0, -25.0], [75.0, -53.0, -11.0, -74.0, -97.0, 75.0, 84.0], [43.0, -49.0, -76.0, 91.0, -27.0, -99.0, 50.0], [-90.0, -33.0, -83.0, 62.0, -4.0, -21.0, 1.0], [69.0, -90.0, 87.0, 100.0, -58.0, 80.0, 97.0]], [[-63.0, -31.0, -69.0, -7.0, 34.0, -66.0, -9.0], [-85.0, -77.0, -21.0, -87.0, -61.0, 45.0, -37.0], [57.0, -79.0, 4.0, -83.0, -90.0, 81.0, -41.0], [-35.0, -24.0, -71.0, 71.0, -29.0, -67.0, 48.0], [-63.0, 23.0, 86.0, 97.0, -34.0, 13.0, 92.0]], [[60.0, 70.0, -7.0, 29.0, 68.0, 78.0, 30.0], [36.0, -43.0, 65.0, -28.0, 44.0, 100.0, -42.0], [81.0, -12.0, -10.0, 52.0, 87.0, -90.0, 6.0], [41.0, 48.0, -18.0, -76.0, -98.0, 26.0, -46.0], [50.0, -12.0, -82.0, -14.0, 48.0, 39.0, 72.0]]], [[[-34.0, -48.0, 26.0, -40.0, 17.0, 98.0, 31.0], [75.0, -86.0, -82.0, -77.0, -13.0, 82.0, 18.0], [75.0, -30.0, 89.0, -62.0, 10.0, 16.0, -70.0], [53.0, -83.0, -64.0, -33.0, 73.0, -40.0, -33.0], [25.0, 100.0, 37.0, -43.0, -99.0, -67.0, -42.0]], [[-9.0, 18.0, 67.0, -31.0, 35.0, 30.0, 65.0], [-85.0, 2.0, 2.0, -57.0, -81.0, -48.0, -97.0], [26.0, -57.0, 61.0, -25.0, 33.0, 83.0, 51.0], [70.0, -50.0, -63.0, -57.0, 89.0, 90.0, -42.0], [-30.0, -6.0, -88.0, 91.0, 32.0, -50.0, -2.0]], [[-84.0, 57.0, 19.0, -11.0, 66.0, -45.0, -86.0], [-36.0, 84.0, 37.0, 48.0, -20.0, 92.0, 91.0], [-26.0, 77.0, 82.0, -32.0, -100.0, -59.0, -6.0], [-35.0, 25.0, -79.0, 64.0, 69.0, -4.0, -78.0], [79.0, -39.0, 44.0, -38.0, 67.0, 65.0, -59.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.mean(0);
    expect(y.shape).toEqual([3, 5, 7]);
    expect(await y.toArrayAsync()).toEqual([[[-42.5, -32.5, 61.0, -20.0, 42.0, -1.0, 3.0], [75.0, -69.5, -46.5, -75.5, -55.0, 78.5, 51.0], [59.0, -39.5, 6.5, 14.5, -8.5, -41.5, -10.0], [-18.5, -58.0, -73.5, 14.5, 34.5, -30.5, -16.0], [47.0, 5.0, 62.0, 28.5, -78.5, 6.5, 27.5]], [[-36.0, -6.5, -1.0, -19.0, 34.5, -18.0, 28.0], [-85.0, -37.5, -9.5, -72.0, -71.0, -1.5, -67.0], [41.5, -68.0, 32.5, -54.0, -28.5, 82.0, 5.0], [17.5, -37.0, -67.0, 7.0, 30.0, 11.5, 3.0], [-46.5, 8.5, -1.0, 94.0, -1.0, -18.5, 45.0]], [[-12.0, 63.5, 6.0, 9.0, 67.0, 16.5, -28.0], [0.0, 20.5, 51.0, 10.0, 12.0, 96.0, 24.5], [27.5, 32.5, 36.0, 10.0, -6.5, -74.5, 0.0], [3.0, 36.5, -48.5, -6.0, -14.5, 11.0, -62.0], [64.5, -25.5, -19.0, -26.0, 57.5, 52.0, 6.5]]]);
});
test("mean dim=1/4", async () => {
    const x = tensor([[[[-11.0, -62.0, -58.0, 14.0, 25.0, -41.0, -37.0], [-89.0, 86.0, 73.0, 55.0, 31.0, 37.0, -11.0], [-22.0, -0.0, -27.0, 15.0, 10.0, -100.0, 59.0], [74.0, -20.0, -42.0, -75.0, 1.0, -20.0, -91.0], [-30.0, 78.0, -12.0, -13.0, 52.0, -27.0, -14.0]], [[-38.0, -61.0, -70.0, -64.0, -75.0, 78.0, -89.0], [-79.0, -36.0, 63.0, -84.0, 98.0, -96.0, 53.0], [73.0, 69.0, 76.0, 65.0, -12.0, -58.0, 86.0], [-81.0, 100.0, 90.0, 70.0, -26.0, -23.0, 62.0], [-44.0, -15.0, -3.0, 1.0, -47.0, -32.0, -94.0]], [[37.0, 50.0, -70.0, 99.0, -61.0, 35.0, 68.0], [38.0, -8.0, 78.0, -84.0, 16.0, -46.0, -64.0], [27.0, 21.0, -29.0, -77.0, -37.0, 77.0, 91.0], [-9.0, 59.0, -97.0, -50.0, 99.0, -64.0, 37.0], [70.0, -98.0, 68.0, -52.0, -24.0, -78.0, 2.0]]], [[[-20.0, 29.0, 85.0, 1.0, 62.0, -67.0, -39.0], [-21.0, -44.0, -19.0, 18.0, -17.0, 40.0, 18.0], [-30.0, 10.0, 37.0, 39.0, 20.0, -82.0, 35.0], [-27.0, 25.0, 42.0, -63.0, 5.0, 59.0, -84.0], [-47.0, -23.0, 96.0, 32.0, -29.0, -23.0, 3.0]], [[45.0, -88.0, 3.0, 54.0, 70.0, 4.0, 55.0], [-70.0, 29.0, -49.0, -99.0, -100.0, -84.0, -36.0], [100.0, -73.0, 36.0, 32.0, -98.0, 61.0, -9.0], [-32.0, -10.0, -80.0, 18.0, 99.0, 99.0, 74.0], [-18.0, 51.0, -68.0, 71.0, -97.0, 23.0, -53.0]], [[-95.0, 29.0, -4.0, 92.0, -66.0, -75.0, -43.0], [-54.0, -40.0, 79.0, 14.0, 13.0, -42.0, -87.0], [43.0, -65.0, 70.0, 18.0, 75.0, -38.0, -58.0], [-6.0, 54.0, -88.0, -62.0, 91.0, 79.0, -88.0], [-15.0, -7.0, -42.0, -52.0, -53.0, -12.0, 87.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.mean(1);
    expect(y.shape).toEqual([2, 5, 7]);
    expect(await y.toArrayAsync()).toEqual([[[-4.0, -24.33333396911621, -66.0, 16.33333396911621, -37.0, 24.0, -19.33333396911621], [-43.33333206176758, 14.0, 71.33333587646484, -37.66666793823242, 48.33333206176758, -35.0, -7.333333492279053], [26.0, 30.0, 6.666666507720947, 1.0, -13.0, -27.0, 78.66666412353516], [-5.333333492279053, 46.33333206176758, -16.33333396911621, -18.33333396911621, 24.66666603088379, -35.66666793823242, 2.6666667461395264], [-1.3333333730697632, -11.666666984558105, 17.66666603088379, -21.33333396911621, -6.333333492279053, -45.66666793823242, -35.33333206176758]], [[-23.33333396911621, -10.0, 28.0, 49.0, 22.0, -46.0, -9.0], [-48.33333206176758, -18.33333396911621, 3.6666667461395264, -22.33333396911621, -34.66666793823242, -28.66666603088379, -35.0], [37.66666793823242, -42.66666793823242, 47.66666793823242, 29.66666603088379, -1.0, -19.66666603088379, -10.666666984558105], [-21.66666603088379, 23.0, -42.0, -35.66666793823242, 65.0, 79.0, -32.66666793823242], [-26.66666603088379, 7.0, -4.666666507720947, 17.0, -59.66666793823242, -4.0, 12.333333015441895]]]);
});
test("mean dim=2/4", async () => {
    const x = tensor([[[[66.0, -67.0, 4.0, -39.0, -81.0, -98.0, -62.0], [1.0, -70.0, 70.0, 82.0, 30.0, -48.0, -84.0], [93.0, -43.0, 58.0, -31.0, 24.0, -80.0, -32.0], [83.0, -93.0, -44.0, -6.0, 21.0, 76.0, -93.0], [84.0, -0.0, 19.0, 71.0, 100.0, 16.0, -55.0]], [[85.0, 89.0, -39.0, -19.0, -16.0, -3.0, -71.0], [6.0, -20.0, 27.0, 22.0, 1.0, -8.0, 1.0], [-59.0, -13.0, -36.0, -44.0, 26.0, 62.0, -7.0], [30.0, 64.0, 56.0, 74.0, -70.0, -37.0, 54.0], [-26.0, -8.0, 69.0, 44.0, 13.0, 95.0, -37.0]], [[-6.0, -99.0, 38.0, -50.0, 10.0, 56.0, -3.0], [50.0, 24.0, 76.0, 86.0, -43.0, -90.0, 55.0], [14.0, 93.0, -47.0, -27.0, 35.0, -17.0, -22.0], [-26.0, 25.0, -48.0, 65.0, -49.0, 65.0, 75.0], [39.0, -43.0, 59.0, -37.0, 78.0, -17.0, 60.0]]], [[[-46.0, -91.0, 46.0, 8.0, -74.0, -73.0, -60.0], [28.0, 4.0, 99.0, 14.0, -43.0, 54.0, -72.0], [44.0, 21.0, 23.0, 1.0, 5.0, -90.0, 65.0], [-93.0, 7.0, 4.0, 15.0, 43.0, 86.0, -80.0], [-29.0, 46.0, 8.0, -89.0, -90.0, -60.0, -7.0]], [[-64.0, 19.0, 34.0, 75.0, 18.0, -33.0, -64.0], [64.0, 5.0, -70.0, 94.0, -97.0, -72.0, 45.0], [-89.0, -90.0, 40.0, -94.0, 44.0, -86.0, -42.0], [89.0, -41.0, -94.0, 93.0, -39.0, -2.0, 89.0], [-44.0, 27.0, 30.0, -35.0, 22.0, 42.0, 35.0]], [[-52.0, 35.0, -34.0, -29.0, -89.0, -37.0, -73.0], [33.0, -7.0, -30.0, 34.0, 18.0, -66.0, 64.0], [1.0, -39.0, -24.0, -9.0, 42.0, -49.0, 26.0], [-91.0, -60.0, 43.0, 49.0, -6.0, -40.0, 18.0], [12.0, 84.0, -41.0, -14.0, 37.0, 85.0, 45.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.mean(2);
    expect(y.shape).toEqual([2, 3, 7]);
    expect(await y.toArrayAsync()).toEqual([[[65.4000015258789, -54.599998474121094, 21.399999618530273, 15.399999618530273, 18.799999237060547, -26.799999237060547, -65.19999694824219], [7.199999809265137, 22.399999618530273, 15.399999618530273, 15.399999618530273, -9.199999809265137, 21.799999237060547, -12.0], [14.199999809265137, 0.0, 15.600000381469727, 7.400000095367432, 6.199999809265137, -0.6000000238418579, 33.0]], [[-19.200000762939453, -2.5999999046325684, 36.0, -10.199999809265137, -31.799999237060547, -16.600000381469727, -30.799999237060547], [-8.800000190734863, -16.0, -12.0, 26.600000381469727, -10.399999618530273, -30.200000762939453, 12.600000381469727], [-19.399999618530273, 2.5999999046325684, -17.200000762939453, 6.199999809265137, 0.4000000059604645, -21.399999618530273, 16.0]]]);
});
test("mean dim=3/4", async () => {
    const x = tensor([[[[-91.0, -59.0, -97.0, -70.0, 86.0, 54.0, 73.0], [96.0, 92.0, -15.0, 27.0, 42.0, -38.0, -12.0], [83.0, -92.0, -41.0, -41.0, 80.0, -6.0, -15.0], [5.0, -80.0, 38.0, -70.0, -83.0, -42.0, -22.0], [22.0, -24.0, 77.0, 76.0, 51.0, -80.0, 67.0]], [[-58.0, -52.0, -2.0, 90.0, -98.0, 3.0, -76.0], [-61.0, 23.0, -39.0, -97.0, 43.0, -47.0, 80.0], [-22.0, 57.0, 47.0, 80.0, -34.0, 76.0, -57.0], [44.0, -70.0, 49.0, 8.0, 41.0, 69.0, 70.0], [-71.0, 28.0, 64.0, -84.0, -14.0, 6.0, 79.0]], [[68.0, -34.0, -73.0, -35.0, 32.0, 26.0, -93.0], [-30.0, -50.0, -5.0, -25.0, -10.0, 58.0, -42.0], [-95.0, -46.0, -5.0, 26.0, -15.0, -22.0, 9.0], [85.0, 58.0, 87.0, 89.0, -13.0, -39.0, -37.0], [52.0, -8.0, -29.0, 75.0, -96.0, -21.0, 7.0]]], [[[64.0, 45.0, -23.0, -33.0, 69.0, 86.0, -40.0], [41.0, -22.0, -19.0, -78.0, 30.0, -6.0, 53.0], [27.0, -76.0, 8.0, 82.0, 31.0, 5.0, 8.0], [-12.0, 5.0, 83.0, -51.0, -4.0, 62.0, -20.0], [71.0, 81.0, 99.0, 70.0, -93.0, -17.0, -56.0]], [[75.0, 96.0, -16.0, 81.0, -71.0, 23.0, 85.0], [-45.0, -11.0, -29.0, 81.0, -82.0, 61.0, 47.0], [32.0, 70.0, -63.0, -96.0, -47.0, -50.0, -34.0], [46.0, -8.0, -12.0, 45.0, -12.0, 53.0, -15.0], [-60.0, -64.0, 100.0, 11.0, -63.0, -92.0, 22.0]], [[-32.0, -77.0, 20.0, -76.0, -70.0, -48.0, 88.0], [-78.0, 95.0, -72.0, 44.0, -85.0, -17.0, -12.0], [-30.0, 42.0, -60.0, -97.0, 98.0, -66.0, 8.0], [39.0, 53.0, 58.0, -87.0, -22.0, -74.0, -98.0], [75.0, 21.0, -77.0, 50.0, -35.0, -41.0, -30.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.mean(3);
    expect(y.shape).toEqual([2, 3, 5]);
    expect(await y.toArrayAsync()).toEqual([[[-14.857142448425293, 27.428571701049805, -4.5714287757873535, -36.28571319580078, 27.0], [-27.571428298950195, -14.0, 21.0, 30.14285659790039, 1.1428571939468384], [-15.571428298950195, -14.857142448425293, -21.14285659790039, 32.85714340209961, -2.857142925262451]], [[24.0, -0.1428571492433548, 12.142857551574707, 9.0, 22.14285659790039], [39.0, 3.142857074737549, -26.85714340209961, 13.857142448425293, -20.85714340209961], [-27.85714340209961, -17.85714340209961, -15.0, -18.714284896850586, -5.285714149475098]]]);
});
test("norm dim=0/1", async () => {
    const x = tensor([52.0, -86.0]);
    expect(x.shape).toEqual([2]);
    const y = x.norm(0);
    expect(y.shape).toEqual([]);
    expect(await y.toArrayAsync()).toEqual(100.4987564086914);
});
test("norm dim=0/2", async () => {
    const x = tensor([[35.0, -78.0, -30.0], [-61.0, 46.0, -35.0]]);
    expect(x.shape).toEqual([2, 3]);
    const y = x.norm(0);
    expect(y.shape).toEqual([3]);
    expect(await y.toArrayAsync()).toEqual([70.32780456542969, 90.55384826660156, 46.097721099853516]);
});
test("norm dim=1/2", async () => {
    const x = tensor([[-8.0, 43.0, 84.0], [-53.0, 21.0, 5.0]]);
    expect(x.shape).toEqual([2, 3]);
    const y = x.norm(1);
    expect(y.shape).toEqual([2]);
    expect(await y.toArrayAsync()).toEqual([94.70480346679688, 57.22761535644531]);
});
test("norm dim=0/3", async () => {
    const x = tensor([[[30.0, 9.0, 24.0, -4.0, 0.0], [62.0, 45.0, 67.0, -22.0, -49.0], [-68.0, -76.0, -56.0, -2.0, -91.0]], [[11.0, -25.0, -83.0, -57.0, 22.0], [30.0, 68.0, 70.0, 92.0, 78.0], [20.0, -28.0, -39.0, -4.0, 53.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.norm(0);
    expect(y.shape).toEqual([3, 5]);
    expect(await y.toArrayAsync()).toEqual([[31.95309066772461, 26.570659637451172, 86.40023040771484, 57.14017868041992, 22.0], [68.87670135498047, 81.54139709472656, 96.8968505859375, 94.5938720703125, 92.11405944824219], [70.88018035888672, 80.99382781982422, 68.24221801757812, 4.4721360206604, 105.30906677246094]]);
});
test("norm dim=1/3", async () => {
    const x = tensor([[[-54.0, 21.0, 74.0, 2.0, -3.0], [-34.0, -49.0, -62.0, 68.0, 55.0], [-60.0, -31.0, -93.0, -47.0, 42.0]], [[-46.0, 43.0, 20.0, 65.0, -85.0], [54.0, 65.0, 82.0, 36.0, -46.0], [-65.0, 59.0, 14.0, -36.0, 80.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.norm(1);
    expect(y.shape).toEqual([2, 5]);
    expect(await y.toArrayAsync()).toEqual([[87.58995056152344, 61.6684684753418, 134.04849243164062, 82.6861572265625, 69.26759338378906], [96.21330261230469, 97.74967956542969, 85.55699920654297, 82.56512451171875, 125.46314239501953]]);
});
test("norm dim=2/3", async () => {
    const x = tensor([[[40.0, -3.0, 80.0, -34.0, 8.0], [13.0, -62.0, -53.0, -57.0, -46.0], [-3.0, -33.0, 63.0, 95.0, -91.0]], [[16.0, 44.0, -11.0, 26.0, 31.0], [-10.0, 6.0, 41.0, -60.0, -76.0], [72.0, -17.0, 71.0, 58.0, -20.0]]]);
    expect(x.shape).toEqual([2, 3, 5]);
    const y = x.norm(2);
    expect(y.shape).toEqual([2, 3]);
    expect(await y.toArrayAsync()).toEqual([[96.06768798828125, 110.39474487304688, 149.57606506347656], [62.84902572631836, 105.7969741821289, 119.49058532714844]]);
});
test("norm dim=0/4", async () => {
    const x = tensor([[[[83.0, 26.0, -25.0, -38.0, -24.0, -3.0, 87.0], [62.0, -0.0, -19.0, 60.0, 33.0, 67.0, 66.0], [-42.0, 3.0, 80.0, 99.0, -89.0, 100.0, -99.0], [30.0, -32.0, 6.0, -67.0, 15.0, 23.0, 62.0], [89.0, -23.0, 93.0, -95.0, 32.0, 55.0, -69.0]], [[93.0, -71.0, 74.0, 62.0, 41.0, 65.0, -34.0], [39.0, -99.0, -74.0, -10.0, 67.0, -40.0, 11.0], [16.0, -5.0, -44.0, -9.0, 73.0, 84.0, 53.0], [-60.0, -83.0, -60.0, -74.0, -55.0, -96.0, -62.0], [4.0, 41.0, 73.0, -81.0, 97.0, -31.0, 38.0]], [[48.0, 94.0, -83.0, -52.0, 37.0, -97.0, 78.0], [58.0, -42.0, 14.0, 58.0, 27.0, -58.0, 42.0], [-24.0, 33.0, -54.0, 46.0, -0.0, -55.0, -97.0], [-83.0, 85.0, -56.0, 2.0, 6.0, 21.0, 13.0], [6.0, 64.0, 59.0, 35.0, 33.0, 26.0, 25.0]]], [[[79.0, -97.0, 4.0, -2.0, -96.0, -48.0, 64.0], [-65.0, -86.0, -6.0, 21.0, 53.0, 96.0, -9.0], [67.0, 21.0, 80.0, 27.0, -88.0, -24.0, 87.0], [-88.0, 12.0, -69.0, -15.0, -43.0, -91.0, 41.0], [7.0, 13.0, -11.0, 24.0, 1.0, 38.0, 43.0]], [[-85.0, 74.0, 12.0, 63.0, -26.0, -78.0, 39.0], [84.0, 14.0, -84.0, 82.0, 97.0, 78.0, -79.0], [3.0, 27.0, 32.0, -93.0, -69.0, -28.0, 70.0], [-96.0, 8.0, -96.0, 9.0, 18.0, 38.0, 41.0], [-80.0, -67.0, -2.0, -45.0, 78.0, 38.0, -24.0]], [[-85.0, 34.0, 63.0, -10.0, 93.0, 73.0, 85.0], [-41.0, -57.0, 99.0, 90.0, 57.0, 54.0, -38.0], [61.0, 4.0, 47.0, -28.0, -0.0, -25.0, 60.0], [-98.0, 19.0, 10.0, 0.0, -44.0, -6.0, -18.0], [-96.0, 14.0, -98.0, 88.0, -26.0, 47.0, -30.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.norm(0);
    expect(y.shape).toEqual([3, 5, 7]);
    expect(await y.toArrayAsync()).toEqual([[[114.58621215820312, 100.42410278320312, 25.317977905273438, 38.05259704589844, 98.95453643798828, 48.093658447265625, 108.00463104248047], [89.8276138305664, 86.0, 19.92485809326172, 63.5688591003418, 62.433963775634766, 117.068359375, 66.61080932617188], [79.07591247558594, 21.21320343017578, 113.1370849609375, 102.61579132080078, 125.15989685058594, 102.83968353271484, 131.79530334472656], [92.97311401367188, 34.1760139465332, 69.2603759765625, 68.65857696533203, 45.54119110107422, 93.86160278320312, 74.3303451538086], [89.27485656738281, 26.419689178466797, 93.64827728271484, 97.98469543457031, 32.015621185302734, 66.85057830810547, 81.3019027709961]], [[125.9920654296875, 102.55242919921875, 74.96665954589844, 88.39117431640625, 48.54894256591797, 101.53324890136719, 51.7397346496582], [92.61209106445312, 99.98500061035156, 111.94641876220703, 82.60750579833984, 117.88977813720703, 87.6584243774414, 79.76214599609375], [16.278820037841797, 27.459060668945312, 54.4058837890625, 93.4344711303711, 100.44898986816406, 88.54377746582031, 87.80091094970703], [113.20777130126953, 83.38465118408203, 113.20777130126953, 74.5452880859375, 57.87054443359375, 103.24727630615234, 74.3303451538086], [80.09993743896484, 78.54934692382812, 73.02738952636719, 92.66067504882812, 124.47087860107422, 49.04079818725586, 44.94440841674805]], [[97.6166000366211, 99.95999145507812, 104.20172882080078, 52.95280838012695, 100.08995819091797, 121.40016174316406, 115.36463928222656], [71.02816009521484, 70.80254364013672, 99.98500061035156, 107.070068359375, 63.071388244628906, 79.24645233154297, 56.63920974731445], [65.55150604248047, 33.241539001464844, 71.58910369873047, 53.851646423339844, 0.0, 60.41522979736328, 114.0570068359375], [128.42507934570312, 87.09764862060547, 56.88584899902344, 2.0, 44.40720748901367, 21.840330123901367, 22.203603744506836], [96.18731689453125, 65.51335906982422, 114.38968658447266, 94.70480346679688, 42.01190185546875, 53.712196350097656, 39.051246643066406]]]);
});
test("norm dim=1/4", async () => {
    const x = tensor([[[[1.0, 2.0, -70.0, 16.0, 10.0, -76.0, 42.0], [16.0, 9.0, -29.0, 35.0, 30.0, -24.0, -13.0], [34.0, -97.0, -24.0, 5.0, 55.0, 99.0, 81.0], [84.0, 55.0, 91.0, -30.0, -56.0, 26.0, -76.0], [4.0, 4.0, 9.0, -83.0, 97.0, -79.0, -88.0]], [[73.0, 18.0, -79.0, 30.0, -69.0, -6.0, -41.0], [67.0, 55.0, 48.0, -95.0, -38.0, 78.0, 28.0], [62.0, -74.0, -41.0, -15.0, 16.0, 50.0, 62.0], [-54.0, 3.0, -90.0, 49.0, -4.0, 59.0, 35.0], [-85.0, -83.0, -59.0, -67.0, -30.0, 78.0, -77.0]], [[-61.0, 12.0, 77.0, 31.0, -60.0, -63.0, -82.0], [57.0, 45.0, -0.0, -56.0, -58.0, -67.0, 76.0], [-58.0, 30.0, -94.0, 30.0, 59.0, -93.0, -50.0], [-75.0, 14.0, -82.0, -99.0, -80.0, 12.0, 30.0], [-3.0, 36.0, 15.0, 52.0, 74.0, 29.0, 50.0]]], [[[65.0, -42.0, 31.0, 16.0, -76.0, 26.0, -18.0], [-23.0, -50.0, -31.0, 76.0, -83.0, -28.0, 4.0], [86.0, 63.0, 40.0, 83.0, 40.0, -94.0, -99.0], [-54.0, -66.0, 58.0, 19.0, 25.0, 57.0, 45.0], [-94.0, 10.0, 53.0, -36.0, -8.0, -39.0, -20.0]], [[-31.0, 13.0, 9.0, 66.0, -11.0, -65.0, -80.0], [-85.0, 51.0, 72.0, 54.0, 22.0, -26.0, -0.0], [-64.0, -62.0, -75.0, -26.0, -57.0, 25.0, -12.0], [-89.0, -86.0, 83.0, -18.0, -85.0, 62.0, -69.0], [-89.0, 41.0, -31.0, 12.0, -24.0, 66.0, 96.0]], [[28.0, 44.0, -62.0, -81.0, -9.0, -58.0, -67.0], [17.0, 54.0, -82.0, -6.0, -13.0, -81.0, 26.0], [75.0, 98.0, -75.0, 7.0, -79.0, -91.0, -56.0], [-49.0, -24.0, -3.0, 47.0, 7.0, -29.0, -54.0], [39.0, -77.0, 31.0, -57.0, 34.0, 30.0, -70.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.norm(1);
    expect(y.shape).toEqual([2, 5, 7]);
    expect(await y.toArrayAsync()).toEqual([[[95.1367416381836, 21.725561141967773, 130.65220642089844, 46.010868072509766, 91.98369598388672, 98.89894104003906, 100.84146118164062], [89.40917205810547, 71.63099670410156, 56.080299377441406, 115.69788360595703, 75.55130767822266, 105.58882141113281, 82.03047943115234], [91.45491027832031, 125.63836669921875, 105.32331085205078, 33.911651611328125, 82.23138427734375, 144.74114990234375, 113.60017395019531], [124.88794708251953, 56.83308792114258, 152.0032958984375, 114.4639663696289, 97.73433685302734, 65.5820083618164, 88.8875732421875], [85.14693450927734, 90.55937194824219, 61.538604736328125, 118.6676025390625, 125.63836669921875, 114.74319458007812, 127.17311096191406]], [[77.26577758789062, 62.20128631591797, 69.8999252319336, 105.7024154663086, 77.3175277709961, 90.91204833984375, 105.8914566040039], [89.68277740478516, 89.53770446777344, 113.44161224365234, 93.42376708984375, 86.84468841552734, 89.5600357055664, 26.305892944335938], [130.8319549560547, 131.97348022460938, 113.35784149169922, 87.25823974609375, 105.30906677246094, 133.1990966796875, 114.37220001220703], [115.05651092529297, 111.03152465820312, 101.30152893066406, 53.7959098815918, 88.8763198852539, 89.07300567626953, 98.49873352050781], [135.19615173339844, 87.80660247802734, 68.78226470947266, 68.47627258300781, 42.379241943359375, 82.3225326538086, 120.48236083984375]]]);
});
test("norm dim=2/4", async () => {
    const x = tensor([[[[40.0, -2.0, 97.0, -34.0, -27.0, -79.0, 95.0], [2.0, 8.0, -27.0, -93.0, 86.0, 27.0, 91.0], [-72.0, 91.0, -11.0, -25.0, -48.0, -2.0, 38.0], [31.0, -3.0, -60.0, -54.0, 31.0, -75.0, -91.0], [32.0, -48.0, -63.0, 33.0, -55.0, 33.0, 36.0]], [[-64.0, 9.0, 17.0, 14.0, -75.0, 96.0, -68.0], [-19.0, -26.0, -63.0, -90.0, 22.0, 63.0, 61.0], [45.0, -56.0, -50.0, -37.0, -70.0, 31.0, -74.0], [-87.0, 76.0, -60.0, -31.0, -67.0, 55.0, 1.0], [11.0, 90.0, 45.0, 87.0, 92.0, -26.0, 23.0]], [[98.0, -79.0, 11.0, -81.0, 80.0, 23.0, 65.0], [-25.0, 72.0, 56.0, 17.0, -5.0, -17.0, -39.0], [61.0, 27.0, 99.0, -87.0, -80.0, 1.0, 91.0], [82.0, 88.0, 68.0, 49.0, -3.0, 76.0, 38.0], [-54.0, 69.0, 57.0, 96.0, 35.0, 6.0, 95.0]]], [[[39.0, 56.0, -54.0, 82.0, -22.0, 65.0, -20.0], [-41.0, 70.0, 27.0, -88.0, -23.0, -6.0, -43.0], [50.0, 24.0, -87.0, -93.0, 64.0, 45.0, -88.0], [56.0, -21.0, -46.0, -99.0, 94.0, -95.0, 23.0], [89.0, 52.0, 28.0, 48.0, -56.0, 95.0, -72.0]], [[-46.0, 51.0, 29.0, 65.0, 14.0, -59.0, 50.0], [27.0, 7.0, -80.0, 34.0, 44.0, 23.0, 61.0], [-12.0, 93.0, 70.0, -34.0, 99.0, -24.0, 70.0], [21.0, -94.0, -31.0, 37.0, 80.0, 28.0, -86.0], [18.0, -36.0, -72.0, 85.0, 37.0, -97.0, -62.0]], [[34.0, -64.0, -83.0, -1.0, 99.0, 70.0, 24.0], [70.0, -80.0, -39.0, 70.0, -65.0, -2.0, 75.0], [12.0, -33.0, 67.0, 63.0, 92.0, -58.0, -86.0], [47.0, -62.0, -43.0, -66.0, -54.0, -73.0, -14.0], [-43.0, 45.0, 96.0, 11.0, 77.0, -38.0, 86.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.norm(2);
    expect(y.shape).toEqual([2, 3, 7]);
    expect(await y.toArrayAsync()).toEqual([[[93.66429138183594, 103.2569580078125, 133.5215301513672, 120.14574432373047, 120.06248474121094, 116.9957275390625, 168.3062744140625], [119.04621124267578, 133.3004150390625, 111.2789306640625, 134.8888397216797, 154.79664611816406, 133.59266662597656, 119.79566192626953], [153.59036254882812, 157.03184509277344, 144.6754913330078, 161.35675048828125, 118.5706558227539, 81.43095397949219, 156.51197814941406]], [[129.45655822753906, 108.42970275878906, 118.80236053466797, 187.6752471923828, 130.69430541992188, 156.0, 125.32357788085938], [61.269893646240234, 146.393310546875, 135.22573852539062, 123.00813293457031, 140.3638153076172, 121.56890869140625, 149.53594970703125], [101.28178405761719, 132.11358642578125, 154.8031005859375, 115.52922058105469, 177.01695251464844, 122.64175415039062, 145.56442260742188]]]);
});
test("norm dim=3/4", async () => {
    const x = tensor([[[[43.0, 25.0, -26.0, -15.0, -69.0, -17.0, 23.0], [-36.0, 100.0, -74.0, 28.0, -69.0, 16.0, -86.0], [-69.0, 26.0, 92.0, 63.0, -28.0, -8.0, -63.0], [33.0, 27.0, -80.0, -15.0, -15.0, 87.0, 74.0], [-93.0, 4.0, -13.0, -17.0, -8.0, 11.0, -26.0]], [[10.0, -11.0, 33.0, -97.0, -54.0, -5.0, 17.0], [42.0, 40.0, 56.0, -58.0, -58.0, -50.0, 29.0], [-34.0, -82.0, 0.0, 80.0, -97.0, -32.0, 68.0], [16.0, -4.0, -99.0, -73.0, -29.0, 87.0, 54.0], [13.0, 96.0, -84.0, -19.0, -20.0, -30.0, -96.0]], [[-73.0, 49.0, -4.0, -39.0, 57.0, 28.0, 90.0], [3.0, 93.0, -77.0, -59.0, -4.0, 79.0, -4.0], [98.0, -19.0, 96.0, 39.0, -75.0, -27.0, 63.0], [97.0, -57.0, -10.0, -8.0, 91.0, 59.0, -68.0], [78.0, -79.0, 97.0, 32.0, -52.0, 34.0, -36.0]]], [[[91.0, -14.0, -91.0, 50.0, -16.0, -74.0, 79.0], [-79.0, -49.0, 85.0, 58.0, 81.0, 73.0, 14.0], [-52.0, 75.0, 64.0, 23.0, 65.0, -4.0, -10.0], [70.0, -40.0, 72.0, -8.0, -27.0, -41.0, 59.0], [-81.0, -12.0, 83.0, 43.0, -49.0, 29.0, -14.0]], [[-4.0, -11.0, 81.0, -89.0, 78.0, 6.0, -79.0], [77.0, -36.0, 88.0, 97.0, -99.0, 66.0, -32.0], [-83.0, -57.0, 64.0, -21.0, 29.0, 32.0, 38.0], [-99.0, -84.0, 54.0, 59.0, -12.0, 61.0, 25.0], [10.0, 70.0, -67.0, 95.0, 7.0, 5.0, -56.0]], [[58.0, 24.0, -76.0, 59.0, -75.0, 78.0, 49.0], [12.0, 32.0, -46.0, 75.0, 64.0, -39.0, 87.0], [27.0, -92.0, -74.0, 30.0, 43.0, 24.0, -11.0], [97.0, 90.0, 89.0, 86.0, 34.0, 58.0, 99.0], [40.0, -54.0, -75.0, -98.0, 67.0, 25.0, 2.0]]]]);
    expect(x.shape).toEqual([2, 3, 5, 7]);
    const y = x.norm(3);
    expect(y.shape).toEqual([2, 3, 5]);
    expect(await y.toArrayAsync()).toEqual([[[94.62557983398438, 173.11557006835938, 150.62203979492188, 147.3533172607422, 99.91996765136719], [118.10588836669922, 128.7206268310547, 171.2804718017578, 163.48699951171875, 165.2815704345703], [146.28738403320312, 156.01602172851562, 176.13914489746094, 170.9034881591797, 167.0748291015625]], [[176.7229461669922, 176.96609497070312, 131.5104522705078, 132.8118896484375, 137.4081573486328], [164.2559051513672, 198.89443969726562, 134.10443115234375, 166.5653076171875, 147.39064025878906], [165.248291015625, 148.6438751220703, 134.59197998046875, 217.13360595703125, 157.6800537109375]]]);
});
